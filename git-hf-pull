#
# HubFlow - a fork of the git-flow tools to apply Vincent Driessen's
# branching model to working with GitHub
#
# Original blog post presenting this model is found at:
#    http://nvie.com/git-model
#
# The HubFlow documentation is found at:
#    http://datasift.github.com/gitflow/
#
# Feel free to contribute to this project at:
#    http://github.com/datasift/gitflow
#
# Copyright 2010 Vincent Driessen. All rights reserved.
# Copyright 2012 MediaSift Ltd. All rights reserved.
#
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#    1. Redistributions of source code must retain the above copyright notice,
#       this list of conditions and the following disclaimer.
#
#    2. Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY VINCENT DRIESSEN ``AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
# EVENT SHALL VINCENT DRIESSEN OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
# OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
# EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# The views and conclusions contained in the software and documentation are
# those of the authors and should not be interpreted as representing official
# policies, either expressed or implied, of Vincent Driessen.
#

require_git_repo
require_hubflow_initialized
hubflow_load_settings

usage() {
    echo "usage: git hf pull [-r]"
}

parse_args() {
    # parse options
    FLAGS "$@" || exit $?
    eval set -- "${FLAGS_ARGV}"
}

cmd_default() {
    cmd_pull "$@"
}

cmd_help() {
    usage
    exit 0
}

cmd_pull() {
    # we support rebasing
    DEFINE_boolean rebase false "pull with rebase" r
    parse_args "$@"

    # make sure we're okay to start
    require_clean_working_tree

    # we need to fetch the latest changes from upstream, before we can merge
    hubflow_fetch_latest_changes_from_origin

    # merge the changes from upstream
    if flag rebase ; then
        git pull --rebase "$ORIGIN"
        if [[ $? -ne 0 ]]; then
            warn "Pull was aborted."
            warn
            warn "There might be conflicts during the rebase, or '$ORIGIN' may be inaccessible."
            exit 1
        fi
    else
        hubflow_remote_merge_helper "$ORIGIN" "$BRANCH"
    fi

    # all done
    echo
    echo "Summary of actions:"
    echo "- Any changes from $ORIGIN/$BRANCH have been pulled into branch '$BRANCH'"
}